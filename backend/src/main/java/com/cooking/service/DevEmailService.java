package com.cooking.service;

import com.cooking.entity.User;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Service d'email pour le d√©veloppement - Affiche les emails dans la console
 */
@Service
@Profile("dev")
public class DevEmailService extends EmailService {
    
    private static final Logger logger = LoggerFactory.getLogger(DevEmailService.class);
    
    @Override
    public void sendWelcomeEmail(User user) {
        logger.info("üéâ ========================================");
        logger.info("üìß EMAIL DE BIENVENUE (MODE D√âVELOPPEMENT)");
        logger.info("üéâ ========================================");
        logger.info("üì§ DESTINATAIRE: {}", user.getEmail());
        logger.info("üë§ UTILISATEUR: {}", user.getUsername());
        logger.info("üé≠ R√îLE: {}", user.getRole());
        logger.info("üìù SUJET: üç≥ Bienvenue sur Cooking App !");
        logger.info("");
        logger.info("üìÑ CONTENU DE L'EMAIL:");
        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        
        String userName = user.getFirstName() != null ? user.getFirstName() : user.getUsername();
        
        logger.info("üç≥ Bienvenue sur Cooking App !");
        logger.info("");
        logger.info("Bonjour {} ! üëã", userName);
        logger.info("");
        logger.info("F√©licitations ! Votre compte a √©t√© cr√©√© avec succ√®s.");
        logger.info("");
        logger.info("Informations de votre compte :");
        logger.info("‚Ä¢ Nom d'utilisateur : {}", user.getUsername());
        logger.info("‚Ä¢ Email : {}", user.getEmail());
        logger.info("‚Ä¢ R√¥le : {}", getRoleFriendlyName(user.getRole()));
        logger.info("");
        logger.info("üéâ Que pouvez-vous faire maintenant ?");
        logger.info("");
        logger.info("üìñ D√©couvrir des recettes - Explorez notre collection");
        logger.info("‚úçÔ∏è Cr√©er vos recettes - Partagez vos cr√©ations culinaires");
        logger.info("üí¨ Commenter et noter - Interagissez avec la communaut√©");
        logger.info("‚≠ê Sauvegarder vos favoris - Gardez vos recettes pr√©f√©r√©es");
        logger.info("");
        logger.info("üöÄ Commencer √† cuisiner: http://localhost:3000");
        logger.info("");
        logger.info("Merci de faire partie de notre communaut√© culinaire ! üë®‚Äçüç≥üë©‚Äçüç≥");
        
        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        logger.info("‚úÖ Email de bienvenue 'envoy√©' en mode d√©veloppement");
        logger.info("üéâ ========================================");
    }
    
    @Override
    public void sendVerificationEmail(User user, String verificationToken) {
        logger.info("üîê ========================================");
        logger.info("üìß EMAIL DE V√âRIFICATION (MODE D√âVELOPPEMENT)");
        logger.info("üîê ========================================");
        logger.info("üì§ DESTINATAIRE: {}", user.getEmail());
        logger.info("üë§ UTILISATEUR: {}", user.getUsername());
        logger.info("üîë TOKEN: {}", verificationToken);
        logger.info("üìù SUJET: üîê V√©rifiez votre adresse email");
        logger.info("");
        logger.info("üîó LIEN DE V√âRIFICATION:");
        logger.info("http://localhost:3000/verify-email?token={}", verificationToken);
        logger.info("");
        logger.info("‚úÖ Email de v√©rification 'envoy√©' en mode d√©veloppement");
        logger.info("üîê ========================================");
    }
    
    @Override
    public void sendPasswordResetEmail(User user, String resetToken) {
        logger.info("üîë ========================================");
        logger.info("üìß EMAIL DE RESET (MODE D√âVELOPPEMENT)");
        logger.info("üîë ========================================");
        logger.info("üì§ DESTINATAIRE: {}", user.getEmail());
        logger.info("üë§ UTILISATEUR: {}", user.getUsername());
        logger.info("üîë TOKEN: {}", resetToken);
        logger.info("üìù SUJET: üîë R√©initialisation de votre mot de passe");
        logger.info("");
        logger.info("üîó LIEN DE RESET:");
        logger.info("http://localhost:3000/reset-password?token={}", resetToken);
        logger.info("");
        logger.info("‚úÖ Email de reset 'envoy√©' en mode d√©veloppement");
        logger.info("üîë ========================================");
    }
    
    @Override
    public void sendSimpleEmail(String to, String subject, String text) {
        logger.info("üìß ========================================");
        logger.info("üìß EMAIL SIMPLE (MODE D√âVELOPPEMENT)");
        logger.info("üìß ========================================");
        logger.info("üì§ DESTINATAIRE: {}", to);
        logger.info("üìù SUJET: {}", subject);
        logger.info("üìÑ CONTENU:");
        logger.info("{}", text);
        logger.info("‚úÖ Email simple 'envoy√©' en mode d√©veloppement");
        logger.info("üìß ========================================");
    }
    
    /**
     * Obtenir le nom convivial du r√¥le
     */
    private String getRoleFriendlyName(User.Role role) {
        return switch (role) {
            case USER -> "Utilisateur";
            case CHEF -> "Chef";
            case ADMIN -> "Administrateur";
            case MODERATOR -> "Mod√©rateur";
        };
    }
    
    @Override
    public boolean isEmailEnabled() {
        return true; // Toujours activ√© en mode dev (pour les logs)
    }
}